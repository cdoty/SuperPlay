// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nanim.proto

#ifndef PROTOBUF_nanim_2eproto__INCLUDED
#define PROTOBUF_nanim_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace im {
namespace bci {
namespace nanim {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_nanim_2eproto();
void protobuf_AssignDesc_nanim_2eproto();
void protobuf_ShutdownFile_nanim_2eproto();

class Frame;
class Animation;
class Image;
class Nanim;

enum PixelFormat {
  RGB_888 = 1,
  RGBA_8888 = 2
};
bool PixelFormat_IsValid(int value);
const PixelFormat PixelFormat_MIN = RGB_888;
const PixelFormat PixelFormat_MAX = RGBA_8888;
const int PixelFormat_ARRAYSIZE = PixelFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* PixelFormat_descriptor();
inline const ::std::string& PixelFormat_Name(PixelFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    PixelFormat_descriptor(), value);
}
inline bool PixelFormat_Parse(
    const ::std::string& name, PixelFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PixelFormat>(
    PixelFormat_descriptor(), name, value);
}
// ===================================================================

class Frame : public ::google::protobuf::Message {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  void Swap(Frame* other);

  // implements Message ----------------------------------------------

  Frame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string imageName = 1;
  inline bool has_imagename() const;
  inline void clear_imagename();
  static const int kImageNameFieldNumber = 1;
  inline const ::std::string& imagename() const;
  inline void set_imagename(const ::std::string& value);
  inline void set_imagename(const char* value);
  inline void set_imagename(const char* value, size_t size);
  inline ::std::string* mutable_imagename();
  inline ::std::string* release_imagename();
  inline void set_allocated_imagename(::std::string* imagename);

  // required int32 duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // required float u1 = 3;
  inline bool has_u1() const;
  inline void clear_u1();
  static const int kU1FieldNumber = 3;
  inline float u1() const;
  inline void set_u1(float value);

  // required float v1 = 4;
  inline bool has_v1() const;
  inline void clear_v1();
  static const int kV1FieldNumber = 4;
  inline float v1() const;
  inline void set_v1(float value);

  // required float u2 = 5;
  inline bool has_u2() const;
  inline void clear_u2();
  static const int kU2FieldNumber = 5;
  inline float u2() const;
  inline void set_u2(float value);

  // required float v2 = 6;
  inline bool has_v2() const;
  inline void clear_v2();
  static const int kV2FieldNumber = 6;
  inline float v2() const;
  inline void set_v2(float value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Frame)
  // @@protoc_insertion_point(class_scope:im.bci.nanim.Frame)
 private:
  inline void set_has_imagename();
  inline void clear_has_imagename();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_u1();
  inline void clear_has_u1();
  inline void set_has_v1();
  inline void clear_has_v1();
  inline void set_has_u2();
  inline void clear_has_u2();
  inline void set_has_v2();
  inline void clear_has_v2();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* imagename_;
  ::google::protobuf::int32 duration_;
  float u1_;
  float v1_;
  float u2_;
  float v2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_nanim_2eproto();
  friend void protobuf_AssignDesc_nanim_2eproto();
  friend void protobuf_ShutdownFile_nanim_2eproto();

  void InitAsDefaultInstance();
  static Frame* default_instance_;
};
// -------------------------------------------------------------------

class Animation : public ::google::protobuf::Message {
 public:
  Animation();
  virtual ~Animation();

  Animation(const Animation& from);

  inline Animation& operator=(const Animation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Animation& default_instance();

  void Swap(Animation* other);

  // implements Message ----------------------------------------------

  Animation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Animation& from);
  void MergeFrom(const Animation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .im.bci.nanim.Frame frames = 2;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 2;
  inline const ::im::bci::nanim::Frame& frames(int index) const;
  inline ::im::bci::nanim::Frame* mutable_frames(int index);
  inline ::im::bci::nanim::Frame* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Frame >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Frame >*
      mutable_frames();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Animation)
  // @@protoc_insertion_point(class_scope:im.bci.nanim.Animation)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Frame > frames_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_nanim_2eproto();
  friend void protobuf_AssignDesc_nanim_2eproto();
  friend void protobuf_ShutdownFile_nanim_2eproto();

  void InitAsDefaultInstance();
  static Animation* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // required .im.bci.nanim.PixelFormat format = 4;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 4;
  inline ::im::bci::nanim::PixelFormat format() const;
  inline void set_format(::im::bci::nanim::PixelFormat value);

  // required bytes pixels = 5;
  inline bool has_pixels() const;
  inline void clear_pixels();
  static const int kPixelsFieldNumber = 5;
  inline const ::std::string& pixels() const;
  inline void set_pixels(const ::std::string& value);
  inline void set_pixels(const char* value);
  inline void set_pixels(const void* value, size_t size);
  inline ::std::string* mutable_pixels();
  inline ::std::string* release_pixels();
  inline void set_allocated_pixels(::std::string* pixels);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Image)
  // @@protoc_insertion_point(class_scope:im.bci.nanim.Image)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_pixels();
  inline void clear_has_pixels();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::std::string* pixels_;
  int format_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_nanim_2eproto();
  friend void protobuf_AssignDesc_nanim_2eproto();
  friend void protobuf_ShutdownFile_nanim_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class Nanim : public ::google::protobuf::Message {
 public:
  Nanim();
  virtual ~Nanim();

  Nanim(const Nanim& from);

  inline Nanim& operator=(const Nanim& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Nanim& default_instance();

  void Swap(Nanim* other);

  // implements Message ----------------------------------------------

  Nanim* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Nanim& from);
  void MergeFrom(const Nanim& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .im.bci.nanim.Image images = 1;
  inline int images_size() const;
  inline void clear_images();
  static const int kImagesFieldNumber = 1;
  inline const ::im::bci::nanim::Image& images(int index) const;
  inline ::im::bci::nanim::Image* mutable_images(int index);
  inline ::im::bci::nanim::Image* add_images();
  inline const ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Image >&
      images() const;
  inline ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Image >*
      mutable_images();

  // repeated .im.bci.nanim.Animation animations = 2;
  inline int animations_size() const;
  inline void clear_animations();
  static const int kAnimationsFieldNumber = 2;
  inline const ::im::bci::nanim::Animation& animations(int index) const;
  inline ::im::bci::nanim::Animation* mutable_animations(int index);
  inline ::im::bci::nanim::Animation* add_animations();
  inline const ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Animation >&
      animations() const;
  inline ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Animation >*
      mutable_animations();

  // optional string author = 3;
  inline bool has_author() const;
  inline void clear_author();
  static const int kAuthorFieldNumber = 3;
  inline const ::std::string& author() const;
  inline void set_author(const ::std::string& value);
  inline void set_author(const char* value);
  inline void set_author(const char* value, size_t size);
  inline ::std::string* mutable_author();
  inline ::std::string* release_author();
  inline void set_allocated_author(::std::string* author);

  // optional string license = 4;
  inline bool has_license() const;
  inline void clear_license();
  static const int kLicenseFieldNumber = 4;
  inline const ::std::string& license() const;
  inline void set_license(const ::std::string& value);
  inline void set_license(const char* value);
  inline void set_license(const char* value, size_t size);
  inline ::std::string* mutable_license();
  inline ::std::string* release_license();
  inline void set_allocated_license(::std::string* license);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Nanim)
  // @@protoc_insertion_point(class_scope:im.bci.nanim.Nanim)
 private:
  inline void set_has_author();
  inline void clear_has_author();
  inline void set_has_license();
  inline void clear_has_license();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Image > images_;
  ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Animation > animations_;
  ::std::string* author_;
  ::std::string* license_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_nanim_2eproto();
  friend void protobuf_AssignDesc_nanim_2eproto();
  friend void protobuf_ShutdownFile_nanim_2eproto();

  void InitAsDefaultInstance();
  static Nanim* default_instance_;
};
// ===================================================================


// ===================================================================

// Frame

// required string imageName = 1;
inline bool Frame::has_imagename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Frame::set_has_imagename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Frame::clear_has_imagename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Frame::clear_imagename() {
  if (imagename_ != &::google::protobuf::internal::kEmptyString) {
    imagename_->clear();
  }
  clear_has_imagename();
}
inline const ::std::string& Frame::imagename() const {
  return *imagename_;
}
inline void Frame::set_imagename(const ::std::string& value) {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  imagename_->assign(value);
}
inline void Frame::set_imagename(const char* value) {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  imagename_->assign(value);
}
inline void Frame::set_imagename(const char* value, size_t size) {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  imagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Frame::mutable_imagename() {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  return imagename_;
}
inline ::std::string* Frame::release_imagename() {
  clear_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagename_;
    imagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Frame::set_allocated_imagename(::std::string* imagename) {
  if (imagename_ != &::google::protobuf::internal::kEmptyString) {
    delete imagename_;
  }
  if (imagename) {
    set_has_imagename();
    imagename_ = imagename;
  } else {
    clear_has_imagename();
    imagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 duration = 2;
inline bool Frame::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Frame::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Frame::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Frame::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 Frame::duration() const {
  return duration_;
}
inline void Frame::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
}

// required float u1 = 3;
inline bool Frame::has_u1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Frame::set_has_u1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Frame::clear_has_u1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Frame::clear_u1() {
  u1_ = 0;
  clear_has_u1();
}
inline float Frame::u1() const {
  return u1_;
}
inline void Frame::set_u1(float value) {
  set_has_u1();
  u1_ = value;
}

// required float v1 = 4;
inline bool Frame::has_v1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Frame::set_has_v1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Frame::clear_has_v1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Frame::clear_v1() {
  v1_ = 0;
  clear_has_v1();
}
inline float Frame::v1() const {
  return v1_;
}
inline void Frame::set_v1(float value) {
  set_has_v1();
  v1_ = value;
}

// required float u2 = 5;
inline bool Frame::has_u2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Frame::set_has_u2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Frame::clear_has_u2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Frame::clear_u2() {
  u2_ = 0;
  clear_has_u2();
}
inline float Frame::u2() const {
  return u2_;
}
inline void Frame::set_u2(float value) {
  set_has_u2();
  u2_ = value;
}

// required float v2 = 6;
inline bool Frame::has_v2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Frame::set_has_v2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Frame::clear_has_v2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Frame::clear_v2() {
  v2_ = 0;
  clear_has_v2();
}
inline float Frame::v2() const {
  return v2_;
}
inline void Frame::set_v2(float value) {
  set_has_v2();
  v2_ = value;
}

// -------------------------------------------------------------------

// Animation

// required string name = 1;
inline bool Animation::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Animation::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Animation::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Animation::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Animation::name() const {
  return *name_;
}
inline void Animation::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Animation::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Animation::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Animation::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Animation::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Animation::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .im.bci.nanim.Frame frames = 2;
inline int Animation::frames_size() const {
  return frames_.size();
}
inline void Animation::clear_frames() {
  frames_.Clear();
}
inline const ::im::bci::nanim::Frame& Animation::frames(int index) const {
  return frames_.Get(index);
}
inline ::im::bci::nanim::Frame* Animation::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::im::bci::nanim::Frame* Animation::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Frame >&
Animation::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Frame >*
Animation::mutable_frames() {
  return &frames_;
}

// -------------------------------------------------------------------

// Image

// required string name = 1;
inline bool Image::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Image::name() const {
  return *name_;
}
inline void Image::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Image::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Image::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Image::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 width = 2;
inline bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Image::width() const {
  return width_;
}
inline void Image::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// required int32 height = 3;
inline bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Image::height() const {
  return height_;
}
inline void Image::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// required .im.bci.nanim.PixelFormat format = 4;
inline bool Image::has_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_format() {
  format_ = 1;
  clear_has_format();
}
inline ::im::bci::nanim::PixelFormat Image::format() const {
  return static_cast< ::im::bci::nanim::PixelFormat >(format_);
}
inline void Image::set_format(::im::bci::nanim::PixelFormat value) {
  assert(::im::bci::nanim::PixelFormat_IsValid(value));
  set_has_format();
  format_ = value;
}

// required bytes pixels = 5;
inline bool Image::has_pixels() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_pixels() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_pixels() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_pixels() {
  if (pixels_ != &::google::protobuf::internal::kEmptyString) {
    pixels_->clear();
  }
  clear_has_pixels();
}
inline const ::std::string& Image::pixels() const {
  return *pixels_;
}
inline void Image::set_pixels(const ::std::string& value) {
  set_has_pixels();
  if (pixels_ == &::google::protobuf::internal::kEmptyString) {
    pixels_ = new ::std::string;
  }
  pixels_->assign(value);
}
inline void Image::set_pixels(const char* value) {
  set_has_pixels();
  if (pixels_ == &::google::protobuf::internal::kEmptyString) {
    pixels_ = new ::std::string;
  }
  pixels_->assign(value);
}
inline void Image::set_pixels(const void* value, size_t size) {
  set_has_pixels();
  if (pixels_ == &::google::protobuf::internal::kEmptyString) {
    pixels_ = new ::std::string;
  }
  pixels_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_pixels() {
  set_has_pixels();
  if (pixels_ == &::google::protobuf::internal::kEmptyString) {
    pixels_ = new ::std::string;
  }
  return pixels_;
}
inline ::std::string* Image::release_pixels() {
  clear_has_pixels();
  if (pixels_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pixels_;
    pixels_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_pixels(::std::string* pixels) {
  if (pixels_ != &::google::protobuf::internal::kEmptyString) {
    delete pixels_;
  }
  if (pixels) {
    set_has_pixels();
    pixels_ = pixels;
  } else {
    clear_has_pixels();
    pixels_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Nanim

// repeated .im.bci.nanim.Image images = 1;
inline int Nanim::images_size() const {
  return images_.size();
}
inline void Nanim::clear_images() {
  images_.Clear();
}
inline const ::im::bci::nanim::Image& Nanim::images(int index) const {
  return images_.Get(index);
}
inline ::im::bci::nanim::Image* Nanim::mutable_images(int index) {
  return images_.Mutable(index);
}
inline ::im::bci::nanim::Image* Nanim::add_images() {
  return images_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Image >&
Nanim::images() const {
  return images_;
}
inline ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Image >*
Nanim::mutable_images() {
  return &images_;
}

// repeated .im.bci.nanim.Animation animations = 2;
inline int Nanim::animations_size() const {
  return animations_.size();
}
inline void Nanim::clear_animations() {
  animations_.Clear();
}
inline const ::im::bci::nanim::Animation& Nanim::animations(int index) const {
  return animations_.Get(index);
}
inline ::im::bci::nanim::Animation* Nanim::mutable_animations(int index) {
  return animations_.Mutable(index);
}
inline ::im::bci::nanim::Animation* Nanim::add_animations() {
  return animations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Animation >&
Nanim::animations() const {
  return animations_;
}
inline ::google::protobuf::RepeatedPtrField< ::im::bci::nanim::Animation >*
Nanim::mutable_animations() {
  return &animations_;
}

// optional string author = 3;
inline bool Nanim::has_author() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Nanim::set_has_author() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Nanim::clear_has_author() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Nanim::clear_author() {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    author_->clear();
  }
  clear_has_author();
}
inline const ::std::string& Nanim::author() const {
  return *author_;
}
inline void Nanim::set_author(const ::std::string& value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void Nanim::set_author(const char* value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void Nanim::set_author(const char* value, size_t size) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Nanim::mutable_author() {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  return author_;
}
inline ::std::string* Nanim::release_author() {
  clear_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = author_;
    author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Nanim::set_allocated_author(::std::string* author) {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    delete author_;
  }
  if (author) {
    set_has_author();
    author_ = author;
  } else {
    clear_has_author();
    author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string license = 4;
inline bool Nanim::has_license() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Nanim::set_has_license() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Nanim::clear_has_license() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Nanim::clear_license() {
  if (license_ != &::google::protobuf::internal::kEmptyString) {
    license_->clear();
  }
  clear_has_license();
}
inline const ::std::string& Nanim::license() const {
  return *license_;
}
inline void Nanim::set_license(const ::std::string& value) {
  set_has_license();
  if (license_ == &::google::protobuf::internal::kEmptyString) {
    license_ = new ::std::string;
  }
  license_->assign(value);
}
inline void Nanim::set_license(const char* value) {
  set_has_license();
  if (license_ == &::google::protobuf::internal::kEmptyString) {
    license_ = new ::std::string;
  }
  license_->assign(value);
}
inline void Nanim::set_license(const char* value, size_t size) {
  set_has_license();
  if (license_ == &::google::protobuf::internal::kEmptyString) {
    license_ = new ::std::string;
  }
  license_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Nanim::mutable_license() {
  set_has_license();
  if (license_ == &::google::protobuf::internal::kEmptyString) {
    license_ = new ::std::string;
  }
  return license_;
}
inline ::std::string* Nanim::release_license() {
  clear_has_license();
  if (license_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = license_;
    license_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Nanim::set_allocated_license(::std::string* license) {
  if (license_ != &::google::protobuf::internal::kEmptyString) {
    delete license_;
  }
  if (license) {
    set_has_license();
    license_ = license;
  } else {
    clear_has_license();
    license_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nanim
}  // namespace bci
}  // namespace im

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::bci::nanim::PixelFormat>() {
  return ::im::bci::nanim::PixelFormat_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nanim_2eproto__INCLUDED
